// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package mintersdk

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA6073a82DecodeGithubComValidatorCenterMinterGoSdkNode(in *jlexer.Lexer, out *node_status) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "jsonrpc":
			out.JSONRPC = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "result":
			(out.Result).UnmarshalEasyJSON(in)
		case "error":
			(out.Error).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA6073a82EncodeGithubComValidatorCenterMinterGoSdkNode(out *jwriter.Writer, in node_status) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"jsonrpc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JSONRPC))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Result).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Error).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v node_status) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA6073a82EncodeGithubComValidatorCenterMinterGoSdkNode(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v node_status) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA6073a82EncodeGithubComValidatorCenterMinterGoSdkNode(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *node_status) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA6073a82DecodeGithubComValidatorCenterMinterGoSdkNode(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *node_status) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA6073a82DecodeGithubComValidatorCenterMinterGoSdkNode(l, v)
}
func easyjsonA6073a82DecodeGithubComValidatorCenterMinterGoSdk(in *jlexer.Lexer, out *ResultNetwork) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version":
			out.Version = string(in.String())
		case "latest_block_hash":
			out.LatestBlockHash = string(in.String())
		case "latest_app_hash":
			out.LatestAppHash = string(in.String())
		case "latest_block_height":
			out.LatestBlockHeightTx = string(in.String())
		case "latest_block_height_i32":
			out.LatestBlockHeight = int(in.Int())
		case "latest_block_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LatestBlockTime).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA6073a82EncodeGithubComValidatorCenterMinterGoSdk(out *jwriter.Writer, in ResultNetwork) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"latest_block_hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LatestBlockHash))
	}
	{
		const prefix string = ",\"latest_app_hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LatestAppHash))
	}
	{
		const prefix string = ",\"latest_block_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LatestBlockHeightTx))
	}
	{
		const prefix string = ",\"latest_block_height_i32\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LatestBlockHeight))
	}
	{
		const prefix string = ",\"latest_block_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.LatestBlockTime).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResultNetwork) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA6073a82EncodeGithubComValidatorCenterMinterGoSdk(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResultNetwork) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA6073a82EncodeGithubComValidatorCenterMinterGoSdk(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResultNetwork) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA6073a82DecodeGithubComValidatorCenterMinterGoSdk(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResultNetwork) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA6073a82DecodeGithubComValidatorCenterMinterGoSdk(l, v)
}
