// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package mintersdk

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonAfd5c9c3DecodeGithubComValidatorCenterMinterGoSdkNodeBlock(in *jlexer.Lexer, out *node_block_ev) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "jsonrpc":
			out.JSONRPC = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "result":
			(out.Result).UnmarshalEasyJSON(in)
		case "error":
			(out.Error).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAfd5c9c3EncodeGithubComValidatorCenterMinterGoSdkNodeBlock(out *jwriter.Writer, in node_block_ev) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"jsonrpc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JSONRPC))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Result).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Error).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v node_block_ev) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAfd5c9c3EncodeGithubComValidatorCenterMinterGoSdkNodeBlock(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v node_block_ev) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAfd5c9c3EncodeGithubComValidatorCenterMinterGoSdkNodeBlock(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *node_block_ev) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAfd5c9c3DecodeGithubComValidatorCenterMinterGoSdkNodeBlock(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *node_block_ev) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAfd5c9c3DecodeGithubComValidatorCenterMinterGoSdkNodeBlock(l, v)
}
func easyjsonAfd5c9c3DecodeGithubComValidatorCenterMinterGoSdk(in *jlexer.Lexer, out *EventValueData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "role":
			out.Role = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "amount":
			out.AmountTx = string(in.String())
		case "amount_f32":
			out.Amount = float32(in.Float32())
		case "coin":
			out.Coin = string(in.String())
		case "validator_pub_key":
			out.ValidatorPubKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAfd5c9c3EncodeGithubComValidatorCenterMinterGoSdk(out *jwriter.Writer, in EventValueData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"role\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Role))
	}
	{
		const prefix string = ",\"address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AmountTx))
	}
	{
		const prefix string = ",\"amount_f32\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Amount))
	}
	{
		const prefix string = ",\"coin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"validator_pub_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ValidatorPubKey))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventValueData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAfd5c9c3EncodeGithubComValidatorCenterMinterGoSdk(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventValueData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAfd5c9c3EncodeGithubComValidatorCenterMinterGoSdk(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventValueData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAfd5c9c3DecodeGithubComValidatorCenterMinterGoSdk(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventValueData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAfd5c9c3DecodeGithubComValidatorCenterMinterGoSdk(l, v)
}
func easyjsonAfd5c9c3DecodeGithubComValidatorCenterMinterGoSdk1(in *jlexer.Lexer, out *BlockEventsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "value":
			(out.Value).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAfd5c9c3EncodeGithubComValidatorCenterMinterGoSdk1(out *jwriter.Writer, in BlockEventsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Value).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BlockEventsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAfd5c9c3EncodeGithubComValidatorCenterMinterGoSdk1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BlockEventsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAfd5c9c3EncodeGithubComValidatorCenterMinterGoSdk1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BlockEventsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAfd5c9c3DecodeGithubComValidatorCenterMinterGoSdk1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BlockEventsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAfd5c9c3DecodeGithubComValidatorCenterMinterGoSdk1(l, v)
}
func easyjsonAfd5c9c3DecodeGithubComValidatorCenterMinterGoSdk2(in *jlexer.Lexer, out *BlockEvResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "events":
			if in.IsNull() {
				in.Skip()
				out.Events = nil
			} else {
				in.Delim('[')
				if out.Events == nil {
					if !in.IsDelim(']') {
						out.Events = make([]BlockEventsResponse, 0, 1)
					} else {
						out.Events = []BlockEventsResponse{}
					}
				} else {
					out.Events = (out.Events)[:0]
				}
				for !in.IsDelim(']') {
					var v1 BlockEventsResponse
					(v1).UnmarshalEasyJSON(in)
					out.Events = append(out.Events, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAfd5c9c3EncodeGithubComValidatorCenterMinterGoSdk2(out *jwriter.Writer, in BlockEvResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"events\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Events == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Events {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BlockEvResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAfd5c9c3EncodeGithubComValidatorCenterMinterGoSdk2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BlockEvResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAfd5c9c3EncodeGithubComValidatorCenterMinterGoSdk2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BlockEvResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAfd5c9c3DecodeGithubComValidatorCenterMinterGoSdk2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BlockEvResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAfd5c9c3DecodeGithubComValidatorCenterMinterGoSdk2(l, v)
}
