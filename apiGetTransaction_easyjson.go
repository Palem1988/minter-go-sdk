// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package mintersdk

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk(in *jlexer.Lexer, out *tx9RedeemCheckData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "raw_check":
			out.RawCheck = string(in.String())
		case "proof":
			out.Proof = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk(out *jwriter.Writer, in tx9RedeemCheckData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"raw_check\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RawCheck))
	}
	{
		const prefix string = ",\"proof\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Proof))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tx9RedeemCheckData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tx9RedeemCheckData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tx9RedeemCheckData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tx9RedeemCheckData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk(l, v)
}
func easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk1(in *jlexer.Lexer, out *tx8UnbondData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pub_key":
			out.PubKey = string(in.String())
		case "coin":
			out.Coin = string(in.String())
		case "value_f32":
			out.Value = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk1(out *jwriter.Writer, in tx8UnbondData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pub_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PubKey))
	}
	{
		const prefix string = ",\"coin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"value_f32\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tx8UnbondData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tx8UnbondData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tx8UnbondData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tx8UnbondData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk1(l, v)
}
func easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk2(in *jlexer.Lexer, out *tx7DelegateDate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pub_key":
			out.PubKey = string(in.String())
		case "coin":
			out.Coin = string(in.String())
		case "stake_f32":
			out.Stake = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk2(out *jwriter.Writer, in tx7DelegateDate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pub_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PubKey))
	}
	{
		const prefix string = ",\"coin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"stake_f32\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Stake))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tx7DelegateDate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tx7DelegateDate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tx7DelegateDate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tx7DelegateDate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk2(l, v)
}
func easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk3(in *jlexer.Lexer, out *tx6DeclareCandidacyData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "pub_key":
			out.PubKey = string(in.String())
		case "commission":
			out.Commission = int(in.Int())
		case "coin":
			out.Coin = string(in.String())
		case "stake_f32":
			out.Stake = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk3(out *jwriter.Writer, in tx6DeclareCandidacyData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"pub_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PubKey))
	}
	{
		const prefix string = ",\"commission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Commission))
	}
	{
		const prefix string = ",\"coin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"stake_f32\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Stake))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tx6DeclareCandidacyData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tx6DeclareCandidacyData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tx6DeclareCandidacyData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tx6DeclareCandidacyData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk3(l, v)
}
func easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk4(in *jlexer.Lexer, out *tx5CreateCoinData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "symbol":
			out.CoinSymbol = string(in.String())
		case "constant_reserve_ratio":
			out.ConstantReserveRatio = int(in.Int())
		case "initial_amount_f32":
			out.InitialAmount = float32(in.Float32())
		case "initial_reserve_f32":
			out.InitialReserve = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk4(out *jwriter.Writer, in tx5CreateCoinData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"symbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CoinSymbol))
	}
	{
		const prefix string = ",\"constant_reserve_ratio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ConstantReserveRatio))
	}
	{
		const prefix string = ",\"initial_amount_f32\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.InitialAmount))
	}
	{
		const prefix string = ",\"initial_reserve_f32\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.InitialReserve))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tx5CreateCoinData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tx5CreateCoinData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tx5CreateCoinData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tx5CreateCoinData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk4(l, v)
}
func easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk5(in *jlexer.Lexer, out *tx4BuyCoinData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coin_to_buy":
			out.CoinToBuy = string(in.String())
		case "coin_to_sell":
			out.CoinToSell = string(in.String())
		case "value_to_buy_f32":
			out.ValueToBuy = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk5(out *jwriter.Writer, in tx4BuyCoinData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coin_to_buy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CoinToBuy))
	}
	{
		const prefix string = ",\"coin_to_sell\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CoinToSell))
	}
	{
		const prefix string = ",\"value_to_buy_f32\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.ValueToBuy))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tx4BuyCoinData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tx4BuyCoinData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tx4BuyCoinData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tx4BuyCoinData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk5(l, v)
}
func easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk6(in *jlexer.Lexer, out *tx3SellAllCoinData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coin_to_sell":
			out.CoinToSell = string(in.String())
		case "coin_to_buy":
			out.CoinToBuy = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk6(out *jwriter.Writer, in tx3SellAllCoinData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coin_to_sell\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CoinToSell))
	}
	{
		const prefix string = ",\"coin_to_buy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CoinToBuy))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tx3SellAllCoinData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tx3SellAllCoinData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tx3SellAllCoinData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tx3SellAllCoinData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk6(l, v)
}
func easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk7(in *jlexer.Lexer, out *tx2SellCoinData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coin_to_sell":
			out.CoinToSell = string(in.String())
		case "coin_to_buy":
			out.CoinToBuy = string(in.String())
		case "value_to_sell_f32":
			out.ValueToSell = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk7(out *jwriter.Writer, in tx2SellCoinData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coin_to_sell\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CoinToSell))
	}
	{
		const prefix string = ",\"coin_to_buy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CoinToBuy))
	}
	{
		const prefix string = ",\"value_to_sell_f32\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.ValueToSell))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tx2SellCoinData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tx2SellCoinData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tx2SellCoinData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tx2SellCoinData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk7(l, v)
}
func easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk8(in *jlexer.Lexer, out *tx1SendData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coin":
			out.Coin = string(in.String())
		case "to":
			out.To = string(in.String())
		case "value_f32":
			out.Value = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk8(out *jwriter.Writer, in tx1SendData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"value_f32\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tx1SendData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tx1SendData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tx1SendData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tx1SendData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk8(l, v)
}
func easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk9(in *jlexer.Lexer, out *tx13MultisendData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "list":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				in.Delim('[')
				if out.List == nil {
					if !in.IsDelim(']') {
						out.List = make([]tx1SendData, 0, 1)
					} else {
						out.List = []tx1SendData{}
					}
				} else {
					out.List = (out.List)[:0]
				}
				for !in.IsDelim(']') {
					var v1 tx1SendData
					(v1).UnmarshalEasyJSON(in)
					out.List = append(out.List, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk9(out *jwriter.Writer, in tx13MultisendData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"list\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.List == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.List {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tx13MultisendData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tx13MultisendData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tx13MultisendData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tx13MultisendData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk9(l, v)
}
func easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk10(in *jlexer.Lexer, out *tx12CreateMultisigData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk10(out *jwriter.Writer, in tx12CreateMultisigData) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tx12CreateMultisigData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tx12CreateMultisigData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tx12CreateMultisigData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tx12CreateMultisigData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk10(l, v)
}
func easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk11(in *jlexer.Lexer, out *tx11SetCandidateOffData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pub_key":
			out.PubKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk11(out *jwriter.Writer, in tx11SetCandidateOffData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pub_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PubKey))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tx11SetCandidateOffData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tx11SetCandidateOffData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tx11SetCandidateOffData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tx11SetCandidateOffData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk11(l, v)
}
func easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk12(in *jlexer.Lexer, out *tx10SetCandidateOnData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pub_key":
			out.PubKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk12(out *jwriter.Writer, in tx10SetCandidateOnData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pub_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PubKey))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tx10SetCandidateOnData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tx10SetCandidateOnData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tx10SetCandidateOnData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tx10SetCandidateOnData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk12(l, v)
}
func easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk13(in *jlexer.Lexer, out *tagKeyValue2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tx.coin_to_buy":
			out.TxCoinToBuy = string(in.String())
		case "tx.coin_to_sell":
			out.TxCoinToSell = string(in.String())
		case "tx.from":
			out.TxFrom = string(in.String())
		case "tx.return":
			out.TxReturnTx = string(in.String())
		case "tx.return_f32":
			out.TxReturn = float32(in.Float32())
		case "tx.sell_amount":
			out.TxSellAmountTx = string(in.String())
		case "tx.sell_amount_f32":
			out.TxSellAmount = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk13(out *jwriter.Writer, in tagKeyValue2) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tx.coin_to_buy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TxCoinToBuy))
	}
	{
		const prefix string = ",\"tx.coin_to_sell\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TxCoinToSell))
	}
	{
		const prefix string = ",\"tx.from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TxFrom))
	}
	{
		const prefix string = ",\"tx.return\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TxReturnTx))
	}
	{
		const prefix string = ",\"tx.return_f32\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.TxReturn))
	}
	{
		const prefix string = ",\"tx.sell_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TxSellAmountTx))
	}
	{
		const prefix string = ",\"tx.sell_amount_f32\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.TxSellAmount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tagKeyValue2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tagKeyValue2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tagKeyValue2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tagKeyValue2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk13(l, v)
}
func easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdkNode(in *jlexer.Lexer, out *node_transaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "jsonrpc":
			out.JSONRPC = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "result":
			(out.Result).UnmarshalEasyJSON(in)
		case "error":
			(out.Error).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdkNode(out *jwriter.Writer, in node_transaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"jsonrpc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JSONRPC))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Result).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Error).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v node_transaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdkNode(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v node_transaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdkNode(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *node_transaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdkNode(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *node_transaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdkNode(l, v)
}
func easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk14(in *jlexer.Lexer, out *TransResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hash":
			out.Hash = string(in.String())
		case "raw_tx":
			out.RawTx = string(in.String())
		case "height":
			out.HeightTx = string(in.String())
		case "height_i32":
			out.Height = int(in.Int())
		case "index":
			out.Index = int(in.Int())
		case "from":
			out.From = string(in.String())
		case "nonce":
			out.NonceTx = string(in.String())
		case "nonce_i32":
			out.Nonce = int(in.Int())
		case "gas_price":
			out.GasPriceTx = int(in.Int())
		case "gas_price_i32":
			out.GasPrice = int(in.Int())
		case "gas_coin":
			out.GasCoin = string(in.String())
		case "gas":
			out.GasUsedTx = string(in.String())
		case "gas_used_i32":
			out.GasUsed = int(in.Int())
		case "type":
			out.Type = int(in.Int())
		case "data":
			(out.DataTx).UnmarshalEasyJSON(in)
		case "payload":
			out.Payload = string(in.String())
		case "tags":
			(out.Tags).UnmarshalEasyJSON(in)
		case "code":
			out.Code = int(in.Int())
		case "log":
			out.Log = string(in.String())
		case "service_data":
			if in.IsNull() {
				in.Skip()
				out.ServiceData = nil
			} else {
				out.ServiceData = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk14(out *jwriter.Writer, in TransResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"raw_tx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RawTx))
	}
	{
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HeightTx))
	}
	{
		const prefix string = ",\"height_i32\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Height))
	}
	{
		const prefix string = ",\"index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Index))
	}
	{
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"nonce\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NonceTx))
	}
	{
		const prefix string = ",\"nonce_i32\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Nonce))
	}
	{
		const prefix string = ",\"gas_price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.GasPriceTx))
	}
	{
		const prefix string = ",\"gas_price_i32\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.GasPrice))
	}
	{
		const prefix string = ",\"gas_coin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GasCoin))
	}
	{
		const prefix string = ",\"gas\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GasUsedTx))
	}
	{
		const prefix string = ",\"gas_used_i32\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.GasUsed))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.DataTx).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Payload))
	}
	{
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Tags).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"log\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Log))
	}
	{
		const prefix string = ",\"service_data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.ServiceData)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk14(l, v)
}
func easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk15(in *jlexer.Lexer, out *TransData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "to":
			out.To = string(in.String())
		case "value_to_sell":
			out.ValueToSell = string(in.String())
		case "coin_to_buy":
			out.CoinToBuy = string(in.String())
		case "value_to_buy":
			out.ValueToBuy = string(in.String())
		case "coin_to_sell":
			out.CoinToSell = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "symbol":
			out.CoinSymbol = string(in.String())
		case "initial_amount":
			out.InitialAmount = string(in.String())
		case "initial_reserve":
			out.InitialReserve = string(in.String())
		case "constant_reserve_ratio":
			out.ConstantReserveRatio = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "commission":
			out.Commission = int(in.IntStr())
		case "stake":
			out.Stake = string(in.String())
		case "pub_key":
			out.PubKey = string(in.String())
		case "coin":
			out.Coin = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "raw_check":
			out.RawCheck = string(in.String())
		case "proof":
			out.Proof = string(in.String())
		case "list":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				in.Delim('[')
				if out.List == nil {
					if !in.IsDelim(']') {
						out.List = make([]SendOneData, 0, 1)
					} else {
						out.List = []SendOneData{}
					}
				} else {
					out.List = (out.List)[:0]
				}
				for !in.IsDelim(']') {
					var v7 SendOneData
					(v7).UnmarshalEasyJSON(in)
					out.List = append(out.List, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk15(out *jwriter.Writer, in TransData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"value_to_sell\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ValueToSell))
	}
	{
		const prefix string = ",\"coin_to_buy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CoinToBuy))
	}
	{
		const prefix string = ",\"value_to_buy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ValueToBuy))
	}
	{
		const prefix string = ",\"coin_to_sell\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CoinToSell))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"symbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CoinSymbol))
	}
	{
		const prefix string = ",\"initial_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InitialAmount))
	}
	{
		const prefix string = ",\"initial_reserve\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InitialReserve))
	}
	{
		const prefix string = ",\"constant_reserve_ratio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ConstantReserveRatio))
	}
	{
		const prefix string = ",\"address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"commission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.IntStr(int(in.Commission))
	}
	{
		const prefix string = ",\"stake\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Stake))
	}
	{
		const prefix string = ",\"pub_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PubKey))
	}
	{
		const prefix string = ",\"coin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"raw_check\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RawCheck))
	}
	{
		const prefix string = ",\"proof\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Proof))
	}
	{
		const prefix string = ",\"list\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.List == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.List {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk15(l, v)
}
func easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk16(in *jlexer.Lexer, out *SendOneData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "to":
			out.To = string(in.String())
		case "coin":
			out.Coin = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk16(out *jwriter.Writer, in SendOneData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"coin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendOneData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendOneData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB2ea0ccaEncodeGithubComValidatorCenterMinterGoSdk16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendOneData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendOneData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB2ea0ccaDecodeGithubComValidatorCenterMinterGoSdk16(l, v)
}
