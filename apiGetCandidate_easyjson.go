// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package mintersdk

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9e98f589DecodeGithubComValidatorCenterMinterGoSdkStakes(in *jlexer.Lexer, out *stakes_info) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "owner":
			out.Owner = string(in.String())
		case "coin":
			out.Coin = string(in.String())
		case "value":
			out.ValueTx = string(in.String())
		case "bip_value":
			out.BipValueTx = string(in.String())
		case "value_f32":
			out.Value = float32(in.Float32())
		case "bip_value_f32":
			out.BipValue = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e98f589EncodeGithubComValidatorCenterMinterGoSdkStakes(out *jwriter.Writer, in stakes_info) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"owner\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Owner))
	}
	{
		const prefix string = ",\"coin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ValueTx))
	}
	{
		const prefix string = ",\"bip_value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BipValueTx))
	}
	{
		const prefix string = ",\"value_f32\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Value))
	}
	{
		const prefix string = ",\"bip_value_f32\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.BipValue))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v stakes_info) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e98f589EncodeGithubComValidatorCenterMinterGoSdkStakes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v stakes_info) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e98f589EncodeGithubComValidatorCenterMinterGoSdkStakes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *stakes_info) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e98f589DecodeGithubComValidatorCenterMinterGoSdkStakes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *stakes_info) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e98f589DecodeGithubComValidatorCenterMinterGoSdkStakes(l, v)
}
func easyjson9e98f589DecodeGithubComValidatorCenterMinterGoSdkNode(in *jlexer.Lexer, out *node_candidate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "jsonrpc":
			out.JSONRPC = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "result":
			(out.Result).UnmarshalEasyJSON(in)
		case "error":
			(out.Error).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e98f589EncodeGithubComValidatorCenterMinterGoSdkNode(out *jwriter.Writer, in node_candidate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"jsonrpc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JSONRPC))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Result).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Error).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v node_candidate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e98f589EncodeGithubComValidatorCenterMinterGoSdkNode(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v node_candidate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e98f589EncodeGithubComValidatorCenterMinterGoSdkNode(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *node_candidate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e98f589DecodeGithubComValidatorCenterMinterGoSdkNode(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *node_candidate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e98f589DecodeGithubComValidatorCenterMinterGoSdkNode(l, v)
}
func easyjson9e98f589DecodeGithubComValidatorCenterMinterGoSdk(in *jlexer.Lexer, out *CandidateInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reward_address":
			out.RewardAddress = string(in.String())
		case "owner_address":
			out.OwnerAddress = string(in.String())
		case "total_stake":
			out.TotalStakeTx = string(in.String())
		case "total_stake_f32":
			out.TotalStake = float32(in.Float32())
		case "pub_key":
			out.PubKey = string(in.String())
		case "commission":
			out.CommissionTx = string(in.String())
		case "created_at_block":
			out.CreatedAtBlockTx = string(in.String())
		case "commission_i32":
			out.Commission = int(in.Int())
		case "created_at_block_i32":
			out.CreatedAtBlock = int(in.Int())
		case "status":
			out.StatusInt = int(in.Int())
		case "stakes":
			if in.IsNull() {
				in.Skip()
				out.Stakes = nil
			} else {
				in.Delim('[')
				if out.Stakes == nil {
					if !in.IsDelim(']') {
						out.Stakes = make([]stakes_info, 0, 1)
					} else {
						out.Stakes = []stakes_info{}
					}
				} else {
					out.Stakes = (out.Stakes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 stakes_info
					(v1).UnmarshalEasyJSON(in)
					out.Stakes = append(out.Stakes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e98f589EncodeGithubComValidatorCenterMinterGoSdk(out *jwriter.Writer, in CandidateInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"reward_address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RewardAddress))
	}
	{
		const prefix string = ",\"owner_address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OwnerAddress))
	}
	{
		const prefix string = ",\"total_stake\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TotalStakeTx))
	}
	{
		const prefix string = ",\"total_stake_f32\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.TotalStake))
	}
	{
		const prefix string = ",\"pub_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PubKey))
	}
	{
		const prefix string = ",\"commission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CommissionTx))
	}
	{
		const prefix string = ",\"created_at_block\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CreatedAtBlockTx))
	}
	{
		const prefix string = ",\"commission_i32\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Commission))
	}
	{
		const prefix string = ",\"created_at_block_i32\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CreatedAtBlock))
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.StatusInt))
	}
	{
		const prefix string = ",\"stakes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Stakes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Stakes {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CandidateInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e98f589EncodeGithubComValidatorCenterMinterGoSdk(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CandidateInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e98f589EncodeGithubComValidatorCenterMinterGoSdk(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CandidateInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e98f589DecodeGithubComValidatorCenterMinterGoSdk(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CandidateInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e98f589DecodeGithubComValidatorCenterMinterGoSdk(l, v)
}
