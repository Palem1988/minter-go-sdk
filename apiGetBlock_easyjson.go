// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package mintersdk

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson73feee59DecodeGithubComValidatorCenterMinterGoSdkNode(in *jlexer.Lexer, out *node_block) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "jsonrpc":
			out.JSONRPC = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "result":
			(out.Result).UnmarshalEasyJSON(in)
		case "error":
			(out.Error).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson73feee59EncodeGithubComValidatorCenterMinterGoSdkNode(out *jwriter.Writer, in node_block) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"jsonrpc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JSONRPC))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Result).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Error).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v node_block) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson73feee59EncodeGithubComValidatorCenterMinterGoSdkNode(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v node_block) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson73feee59EncodeGithubComValidatorCenterMinterGoSdkNode(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *node_block) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson73feee59DecodeGithubComValidatorCenterMinterGoSdkNode(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *node_block) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson73feee59DecodeGithubComValidatorCenterMinterGoSdkNode(l, v)
}
func easyjson73feee59DecodeGithubComValidatorCenterMinterGoSdk(in *jlexer.Lexer, out *ErrorStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "message":
			out.Message = string(in.String())
		case "data":
			out.Data = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson73feee59EncodeGithubComValidatorCenterMinterGoSdk(out *jwriter.Writer, in ErrorStruct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Data))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ErrorStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson73feee59EncodeGithubComValidatorCenterMinterGoSdk(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrorStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson73feee59EncodeGithubComValidatorCenterMinterGoSdk(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErrorStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson73feee59DecodeGithubComValidatorCenterMinterGoSdk(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrorStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson73feee59DecodeGithubComValidatorCenterMinterGoSdk(l, v)
}
func easyjson73feee59DecodeGithubComValidatorCenterMinterGoSdk1(in *jlexer.Lexer, out *BlockValidatorsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pub_key":
			out.PubKey = string(in.String())
		case "signed":
			out.Signed = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson73feee59EncodeGithubComValidatorCenterMinterGoSdk1(out *jwriter.Writer, in BlockValidatorsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pub_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PubKey))
	}
	{
		const prefix string = ",\"signed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Signed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BlockValidatorsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson73feee59EncodeGithubComValidatorCenterMinterGoSdk1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BlockValidatorsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson73feee59EncodeGithubComValidatorCenterMinterGoSdk1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BlockValidatorsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson73feee59DecodeGithubComValidatorCenterMinterGoSdk1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BlockValidatorsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson73feee59DecodeGithubComValidatorCenterMinterGoSdk1(l, v)
}
func easyjson73feee59DecodeGithubComValidatorCenterMinterGoSdk2(in *jlexer.Lexer, out *BlockResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hash":
			out.Hash = string(in.String())
		case "height":
			out.HeightTx = string(in.String())
		case "height_i32":
			out.Height = int(in.Int())
		case "time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "num_txs":
			out.NumTxsTx = string(in.String())
		case "num_txs_i32":
			out.NumTxs = int(in.Int())
		case "total_txs":
			out.TotalTxsTx = string(in.String())
		case "total_txs_i32":
			out.TotalTxs = int(in.Int())
		case "transactions":
			if in.IsNull() {
				in.Skip()
				out.Transactions = nil
			} else {
				in.Delim('[')
				if out.Transactions == nil {
					if !in.IsDelim(']') {
						out.Transactions = make([]TransResponse, 0, 1)
					} else {
						out.Transactions = []TransResponse{}
					}
				} else {
					out.Transactions = (out.Transactions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 TransResponse
					(v1).UnmarshalEasyJSON(in)
					out.Transactions = append(out.Transactions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "block_reward":
			out.BlockRewardTx = string(in.String())
		case "block_reward_f32":
			out.BlockReward = float32(in.Float32())
		case "size":
			out.SizeTx = string(in.String())
		case "size_i32":
			out.Size = int(in.Int())
		case "validators":
			if in.IsNull() {
				in.Skip()
				out.Validators = nil
			} else {
				in.Delim('[')
				if out.Validators == nil {
					if !in.IsDelim(']') {
						out.Validators = make([]BlockValidatorsResponse, 0, 2)
					} else {
						out.Validators = []BlockValidatorsResponse{}
					}
				} else {
					out.Validators = (out.Validators)[:0]
				}
				for !in.IsDelim(']') {
					var v2 BlockValidatorsResponse
					(v2).UnmarshalEasyJSON(in)
					out.Validators = append(out.Validators, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "proposer":
			out.Proposer = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson73feee59EncodeGithubComValidatorCenterMinterGoSdk2(out *jwriter.Writer, in BlockResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HeightTx))
	}
	{
		const prefix string = ",\"height_i32\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Height))
	}
	{
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Time).MarshalJSON())
	}
	{
		const prefix string = ",\"num_txs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NumTxsTx))
	}
	{
		const prefix string = ",\"num_txs_i32\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NumTxs))
	}
	{
		const prefix string = ",\"total_txs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TotalTxsTx))
	}
	{
		const prefix string = ",\"total_txs_i32\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TotalTxs))
	}
	{
		const prefix string = ",\"transactions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Transactions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Transactions {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"block_reward\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BlockRewardTx))
	}
	{
		const prefix string = ",\"block_reward_f32\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.BlockReward))
	}
	{
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SizeTx))
	}
	{
		const prefix string = ",\"size_i32\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Size))
	}
	{
		const prefix string = ",\"validators\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Validators == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Validators {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"proposer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Proposer))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BlockResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson73feee59EncodeGithubComValidatorCenterMinterGoSdk2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BlockResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson73feee59EncodeGithubComValidatorCenterMinterGoSdk2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BlockResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson73feee59DecodeGithubComValidatorCenterMinterGoSdk2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BlockResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson73feee59DecodeGithubComValidatorCenterMinterGoSdk2(l, v)
}
